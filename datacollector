#!/usr/bin/env python

import sys, time, getopt, string, os, imp, select
from multiprocessing import *

from database import Database

def import_modules(path):
    modules = {}
    for i in os.listdir(path):
        if i.endswith('.py'):
            name = i[:-3]
            modules[name] = imp.load_source(name, os.path.join(path,i))
    return modules


class DataCollector:
    def start_module(self, name, mod, conf):
        try:
            streams = self.db.select_streams_by_module(name)
            p = Process(name=name, target=mod.run_module, args=(streams, conf))
            self.processes.append(p)
        except Exception, e:
            raise

    def __init__(self, config):
        self.modules = import_modules('dataparsers/')

        self.db = Database("ntsc2", "salcock", "", "")
        self.db.build_databases(self.modules)

        self.processes = []

        for m in self.modules.items():
            self.start_module(m[0], m[1], config)
        for p in self.processes:
            p.start()

    def run(self):
        cli = select.poll()
        cli.register(sys.stdin, select.POLLIN)

        while True:
            try:
                if cli.poll(0):
                    command = sys.stdin.readline()[:-1].strip()
                    print command
            except:
                raise

    def get_processes(self):
        return self.processes

if __name__ == '__main__':
    
    dc = DataCollector("")
    
    if dc == 0:
        exit(1)
    try:
        dc.run()
    except KeyboardInterrupt:
        for p in dc.get_processes():
            p.terminate()
        exit(1)
    except:
        raise


# vim: set sw=4 tabstop=4 softtabstop=4 expandtab :

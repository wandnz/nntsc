#!/usr/bin/env python

import sys, time, getopt, string, os, imp, select, argparse
from multiprocessing import *

from libnntsc.database import Database
from libnntsc.configurator import *
from libnntsc.importer import import_parsers
from libnntsc.exporter import NNTSCExporter
import libnntsc.logger as logger
import daemon, lockfile, signal

class DataCollector():
    def start_module(self, name, mod, conf):
        try:
            streams = self.db.select_streams_by_module(name)
            
            pipe_recv, pipe_send = Pipe(False)
            
            p = Process(name=name, target=mod.run_module, args=(streams, conf,
                    pipe_send))
            p.daemon = True


            self.exporter.register_source(pipe_recv)
            self.processes.append(p)
        except Exception, e:
            raise

    def __init__(self, listen_port, config, backgrounded):
        self.modules = import_parsers([])
        self.exporter = NNTSCExporter(listen_port);
        self.config = config
        self.backgrounded = backgrounded

    def configure(self):

        nntsc_conf = load_nntsc_config(self.config)
        if nntsc_conf == 0:
            sys.exit(0)

        dbconf = get_nntsc_db_config(nntsc_conf)
        if dbconf == {}:
            sys.exit(1)

        self.db = Database(dbconf["name"], dbconf["user"], dbconf["pass"], 
                dbconf["host"])

        self.exporter.configure(self.config)

        self.processes = []
        self.config =nntsc_conf 

    def run(self):
        if self.backgrounded:
            logger.createLogger(True, "/tmp/nntsc.log", "NNTSC")

        
        self.configure()
        logger.log("Starting NNTSC Collector")
        for m in self.modules.items():
            self.start_module(m[0], m[1], self.config)
        for p in self.processes:
            p.start()
       
        self.exporter.run()

        for p in self.processes:
            try:
                p.join()
            except:
                raise

    def get_processes(self):
        return self.processes


    def __del__(self):
        for p in self.processes:
            p.terminate()
        

def cleanup():
    logger.log("Calling cleanup function\n")
    for p in dc.get_processes():
        p.terminate()
    exit(0)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("-C", "--configfile", help="Specify the location of the NNTSC config file")
    parser.add_argument("-p", "--port", help="The port to listen for incoming connections on (default: 61234)", default=61234, type=int)
    parser.add_argument("-b", "--background", help="Run as a daemon", action="store_true")
    parser.add_argument("-P", "--pidfile", help="PID file location (if running backgrounded)", default=None)

    args = parser.parse_args()
    
    if (args.configfile == None):
        print >> sys.stderr, "Must provide a config file using -C!"
        sys.exit(1)
    else:
        config = args.configfile

    listen_port = args.port
         
    if args.background:
        
        if args.pidfile == None:    
            pidfile = None
        else:
            pidfile = lockfile.FileLock(args.pidfile)
    
        context = daemon.DaemonContext(
            pidfile = pidfile,
        )

        with context:
            dc = DataCollector(listen_port, config, True)
            dc.run()
    
    else:
        dc = DataCollector(listen_port, config, False)
        try:
            dc.run()
        except KeyboardInterrupt:
            cleanup()
        except:
            raise


# vim: set sw=4 tabstop=4 softtabstop=4 expandtab :
